generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique @db.VarChar(255)
  password      String     @db.VarChar(255)
  nom           String     @db.VarChar(100)
  prenom        String     @db.VarChar(100)
  adresse       String?
  code_postal   String?    @db.VarChar(20)
  ville         String?    @db.VarChar(100)
  pays          String?    @default("France") @db.VarChar(100)
  telephone     String?    @db.VarChar(20)
  is_admin      Boolean?   @default(false)
  date_creation DateTime?  @default(now()) @db.Timestamp(6)
  commandes     Commande[]
  paniers       Panier[]

  @@map("user")
}

model Categorie {
  id          Int       @id @default(autoincrement())
  nom         String    @db.VarChar(100)
  description String?
  articles    Article[]

  @@map("categorie")
}

model Article {
  id            Int        @id @default(autoincrement())
  nom           String     @db.VarChar(255)
  prix          Decimal    @db.Decimal(10, 2)
  description   String?
  image         String?    @db.VarChar(255)
  categorie_id  Int?
  date_creation DateTime?  @default(now()) @db.Timestamp(6)
  categorie     Categorie? @relation(fields: [categorie_id], references: [id], onUpdate: NoAction)
  stocks        Stock[]

  @@map("article")
}

model Taille {
  id     Int     @id @default(autoincrement())
  nom    String  @db.VarChar(50)
  stocks Stock[]

  @@map("taille")
}

model Stock {
  id           Int          @id @default(autoincrement())
  article_id   Int
  taille_id    Int
  quantite     Int          @default(0)
  panier_items PanierItem[]
  article      Article      @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  taille       Taille       @relation(fields: [taille_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([article_id, taille_id], name: "unique_article_taille")
  @@map("stock")
}

model Panier {
  id            Int          @id @default(autoincrement())
  user_id       Int
  date_creation DateTime?    @default(now()) @db.Timestamp(6)
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items         PanierItem[]

  @@map("panier")
}

model PanierItem {
  id         Int       @id @default(autoincrement())
  panier_id  Int
  stock_id   Int
  quantite   Int       @default(1)
  date_ajout DateTime? @default(now()) @db.Timestamp(6)
  panier     Panier    @relation(fields: [panier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  stock      Stock     @relation(fields: [stock_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("panier_item")
}

model StatutCommande {
  id          Int        @id @default(autoincrement())
  nom         String     @db.VarChar(50)
  description String?
  commandes   Commande[]

  @@map("statut_commande")
}

model Commande {
  id                    Int            @id @default(autoincrement())
  user_id               Int
  reference             String         @unique @db.VarChar(50)
  total                 Decimal        @db.Decimal(10, 2)
  statut_id             Int
  adresse_livraison     String
  code_postal_livraison String         @db.VarChar(20)
  ville_livraison       String         @db.VarChar(100)
  pays_livraison        String         @default("France") @db.VarChar(100)
  telephone_livraison   String?        @db.VarChar(20)
  date_commande         DateTime?      @default(now()) @db.Timestamp(6)
  statut                StatutCommande @relation(fields: [statut_id], references: [id], onUpdate: NoAction)
  user                  User           @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@map("commande")
}
